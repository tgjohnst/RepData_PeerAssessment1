print("Hello!!")
library(datasets)
data(iris)
?iris
data
iris
split(iris)
split(iris,'Species')
split(iris,iris$Species)
lapply(colmeans(split(iris, iris$Species)))
sapply(colmeans, split(iris, iris$Species)))
sapply(colmeans, split(iris, iris$Species))
sapply(split(iris, iris$Species), colmeans)
sapply(split(iris, iris$Species), colMeans)
?mapply
?sapply
?tapply
?apply
virgins <- iris[iris$Species=="virginica",]
mean(virgins$Sepal.Length)
data(mtcars)
sapply(mtcars, cyl, mean)
tapply
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
cyls<-tapply(mtcars$mpg, mtcars$cyl, mean)
hps<-tapply(mtcars$hp, mtcars$cyl, mean)
hps
hps[1]-hps[3]
ls()
debug(ls)
ls()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
system.time(rnorm())
system.time(rnorm(3))
?inverse
?solve
## These functions cache the inverse of a matrix and return it, either by
## calculating it or retreiving a previously calculated matrix from cache.
## This function creates a list of functions that set the matrix, get the matrix,
## set the inverse of the matrix and get the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
v <- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
get <- function() x
setinverse <- function(inverse) v <<- inverse
getinverse <- function() v
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix created using the above function.
cacheSolve <- function(x, ...) {
v <- x$getinverse()
if(!is.null(v)) {
message("getting cached data")
return(v)
}
data <- x$get()
v <- solve(data, ...)
x$setinverse(v)
v
}
mat <- makeCacheMatrix(matrix(c(2,3,4,5), nrow = 2))
mat
cacheSolve(mat)
cacheSolve(mat)
# This function (makeCacheMatrix) creates a special "matrix" object that can
# cache its inverse.
#x<-matrix(1:4,2,2) #data
#z<-matrix(3:6,2,2) #data
makeCacheMatrix <- function(x = matrix()){ #function takes matrix as input
m <- NULL #setting inverse variable to null
#assign("m", NULL, envir= .GlobalEnv)
set <- function(y) { #naming and assigning subfunction;
x <<- y #turns new input into live input
m <<- NULL #resets m to null, one level up (parent environment)
}
get <- function() x # naming and assigning subfunction: retrieves current data matrix
setMatrix <- function(x) {  # naming and assigning subfunction: takes current data matrix and calculates its inverse
m <-solve(x) # assigns name m to inverse
}
getMatrix <- function() m  #naming and assigning subfunction: retrieves inverse
list(set=set, get=get, setMatrix=setMatrix, #list items (names of subfunctions) for function
getMatrix=getMatrix)
}
#A<-makeCacheMatrix() #instantiate MCM function
#m<<-A$setMatrix(x) # subfunction (with this instantiation) - generates inverse and assigns it to variable
# ## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix.
# ## If the inverse has already been calculated (and the matrix has not changed),
# ## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(),...){ #function takes matrix as input
if(!is.null(m)){ #check to see if existing m is null; if not...
message("getting cached data") #throw message saying "getting cached data"
print(m) # print cached inverse
}
else{ #if existing m is indeed null...
m<<-solve(x)    #solve the matrix and put the resulting inverse in a variable named m
print(m)       #print new inverse
}
}
mat <- makeCacheMatrix(matrix(c(2,3,4,5), nrow = 2))
cacheSolve(mat)
mat
m
x
## These functions cache the inverse of a matrix and return it, either by
## calculating it or retreiving a previously calculated matrix from cache.
## This function creates a list of functions that set the matrix, get the matrix,
## set the inverse of the matrix and get the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
v <- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
get <- function() x
setinverse <- function(inverse) v <<- inverse
getinverse <- function() v
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix created using the above function.
cacheSolve <- function(x, ...) {
v <- x$getinverse()
if(!is.null(v)) {
message("getting cached data")
return(v)
}
data <- x$get()
v <- solve(data, ...)
x$setinverse(v)
v
}
mat
cacheSolve(mat)
v
makeCacheMatrix <- function(x = matrix()){ #function takes matrix as input
m <- NULL #setting inverse variable to null
#assign("m", NULL, envir= .GlobalEnv)
set <- function(y) { #naming and assigning subfunction;
x <<- y #turns new input into live input
m <<- NULL #resets m to null, one level up (parent environment)
}
get <- function() x # naming and assigning subfunction: retrieves current data matrix
setMatrix <- function(x) {  # naming and assigning subfunction: takes current data matrix and calculates its inverse
m <-solve(x) # assigns name m to inverse
}
getMatrix <- function() m  #naming and assigning subfunction: retrieves inverse
list(set=set, get=get, setMatrix=setMatrix, #list items (names of subfunctions) for function
getMatrix=getMatrix)
}
#A<-makeCacheMatrix() #instantiate MCM function
#m<<-A$setMatrix(x) # subfunction (with this instantiation) - generates inverse and assigns it to variable
# ## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix.
# ## If the inverse has already been calculated (and the matrix has not changed),
# ## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(),...){ #function takes matrix as input
if(!is.null(m)){ #check to see if existing m is null; if not...
message("getting cached data") #throw message saying "getting cached data"
print(m) # print cached inverse
}
else{ #if existing m is indeed null...
m<<-solve(x)    #solve the matrix and put the resulting inverse in a variable named m
print(m)       #print new inverse
}
}
mat <- makeCacheMatrix(x = matrix(c(3,4,5,6), nrow=2))
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL			# stores the inverted matrix
# get/set
get <- function() x
set <- function(y) {
x <<- y
inv <<- NULL
}
# get/set for inversion
getInverse <- function() inv
setInverse <- function(solve) inv <<- solve
# return the 'CacheMatrix'
return(list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse))
}
##########################
# This function calculates the inverted form of a supplied CacheMatrix in a cache-aware
# manner. If the inverse is not cached, cacheSolve will calculate and store it. If
# the inverse is cached, cacheSolve will also notify the user that it is returning
# a cached value.
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
# Use cached inversion if there
if(!is.null(inv)) {
message("Using cached inverted matrix")
return(inv)
}
# Otherwise, calculate it and store as inv
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
return(inv)
}
mat <- makeCacheMatrix(x = matrix(c(3,4,5,6), nrow=2))
cacheSolve(mat)
cacheSolve(mat)
xyplot()
library(lattice)
xyplot()
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.abline(h=3)
panel.abline(h=300)
lines(300)
?panel.abline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set()
?splom
?print.trellis()
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
tens <- 0:9
locs <- character()
for (i in tens) {
for (j in tens) {
for (k in tens) {
loc <- paste0("N 41 18.",j,"96, W 072 55.",k,"16")
locs <- c(locs, loc)
}
}
}
df <- data.frame("locs"=locs)
write(locs, file="Z:/Lotus/Dropbox/Creative/EscapeNewHaven_PuzzHunt/locs.txt")
tens <- 0:9
locs <- character()
for (j in tens) {
for (k in tens) {
loc <- paste0("N 41 18.",j,"96, W 072 55.",k,"16")
locs <- c(locs, loc)
}
}
df <- data.frame("locs"=locs)
write(locs, file="Z:/Lotus/Dropbox/Creative/EscapeNewHaven_PuzzHunt/locs.txt")
setwd("Z:/Lotus/Dropbox/Coursera/5_Reproducible_Research/Projects/RepData_PeerAssessment1")
activity <- read.csv(unz('activity.zip','activity.csv'))
summary(activity)
activity$date <- as.Date(activity$date)
head(activity$date)
activityImputedNA <- activity
activityImputedNA$steps <- ifelse(is.na(activityImputedNA$steps),
stepsPerInterval_average$steps[match(activityImputedNA$interval,stepsPerInterval_average$interval)],
activityImputedNA$steps)
sum(is.na(activityImputedNA$steps))
stepsPerInterval_average <- aggregate(steps ~ interval, activityNoNA,mean)
plot(stepsPerInterval_average$interval, stepsPerInterval_average$steps,
type='l',
xlab="Interval",
ylab="Average # of steps",
main="Average step profile over the course of 61 days")
activityNoNA <- na.omit(activity)
stepsPerDay_sum <- aggregate(steps ~ date, activityNoNA,sum)
hist(stepsPerDay_sum$steps,
col="steelblue",
xlab="Steps per day", breaks=10,
main="Distribution of steps per day over 61 days")
meanSteps <- as.integer(mean(stepsPerDay_sum$steps))
medianSteps <- median(stepsPerDay_sum$steps)
stepsPerInterval_average <- aggregate(steps ~ interval, activityNoNA,mean)
plot(stepsPerInterval_average$interval, stepsPerInterval_average$steps,
type='l',
xlab="Interval",
ylab="Average # of steps",
main="Average step profile over the course of 61 days")
maxAvgSteps <- as.integer(max(stepsPerInterval_average$steps))
maxAvgStepInterval <- stepsPerInterval_average$interval[which.max(stepsPerInterval_average$steps)]
nrow(activity)-nrow(activityNoNA)
activityImputedNA <- activity
activityImputedNA$steps <- ifelse(is.na(activityImputedNA$steps),
stepsPerInterval_average$steps[match(activityImputedNA$interval,stepsPerInterval_average$interval)],
activityImputedNA$steps)
sum(is.na(activityImputedNA$steps))
stepsPerDay_sum <- aggregate(steps ~ date, activityImputedNA,sum)
hist(stepsPerDay_sum$steps,
col="steelblue",
xlab="Steps per day", breaks=10,
main="Distribution of steps per day over 61 days")
meanSteps <- as.integer(mean(stepsPerDay_sum$steps))
medianSteps <- as.integer(median(stepsPerDay_sum$steps))
weekday(head(activityImputedNA$steps))
weekdays(head(activityImputedNA$steps))
weekdays(head(activityImputedNA$date))
weekends(head(activityImputedNA$date))
wkdays <- weekdays(activityImputedNA$date)
activityImputedNA$daytype <- ifelse(wkdays %in% c("Saturday","Sunday"),
"weekend",
"weekday")
activityImputedNA$daytype <- as.factor(ifelse(wkdays %in% c("Saturday","Sunday"),
"weekend",
"weekday"))
View(activityImputedNA)
View(activityImputedNA)
stepsPerDayType_mean <- aggregate(steps ~ interval + daytype, activityImputedNoNA, mean)
stepsPerDayType_mean <- aggregate(steps ~ interval + daytype, activityImputedNA, mean)
View(stepsPerDayType_mean)
View(stepsPerDayType_mean)
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library(ggplot2)
xyplot(steps ~ interval | daytype, stepsPerDayType_mean,
type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library(lattice)
xyplot(steps ~ interval | daytype, stepsPerDayType_mean,
type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | daytype, stepsPerDayType_mean,
type = "l", layout = c(1, 2),
xlab = "Interval",
ylab = "Number of steps",
col="gray70")
xyplot(steps ~ interval | daytype, stepsPerDayType_mean,
type = "l", layout = c(1, 2),
xlab = "Interval",
ylab = "Number of steps",
col="gray50")
